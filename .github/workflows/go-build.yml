name: golang-pipeline
on: push
jobs:
  build:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags')
    # defaults:
    #   run:
    #     working-directory: src/
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: go Build
        run: go mod download ; go build . 
        env:
          GOARCH: amd64
          GOOS: linux
          EXTRA_FILES: "LICENSE"

      - name: zip artifact
        run: |
          tar -cvzf jwt.tar.gz jwt    

      - name: Create Release
        id: create_release
        uses: go-semantic-release/action@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          #github-token: ${{ secrets.GITHUB_TOKEN }}
          update-file: jwt.tar.gz
          changelog-generator-opt: "emojis=true"


      # - name: Upload Release Asset
      #   id: upload_release_asset 
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ github.token }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./jwt.tar.gz
      #     asset_name: jwt.tar.gz
      #     asset_content_type: application/tar+gzip

      # - name: Get release
      #   id: get_release
      #   uses: bruceadams/get-release@v1.2.3
      #   env:
      #     GITHUB_TOKEN: ${{ github.token }}          

      # - name: Upload release binary
      #   uses: actions/upload-release-asset@v1.0.2
      #   env:
      #     GITHUB_TOKEN: ${{ github.token }}
      #   with:
      #     upload_url: ${{ steps.get_release.outputs.upload_url }}
      #     asset_path: ./target/release/my-widget
      #     asset_name: my-widget
      #     asset_content_type: application/octet-stream