name: golang-pipeline
on: push
jobs:
  build:
    strategy:
      matrix:
        # build and publish in parallel: linux/386, linux/amd64, linux/arm64, windows/386, windows/amd64, darwin/amd64, darwin/arm64
        goos: ["linux", "windows", "darwin"]
        goarch: ["386", "amd64", "arm64"]
        exclude:
          - goarch: "386"
            goos: "darwin"
          - goarch: "arm64"
            goos: "windows"
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags')
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: go Build
        run: |
          set -x
          OUTPUT_NAME=jwt'-'$GOOS'-'$GOARCH
          if [ $GOOS = "windows" ]; then
            OUTPUT_NAME+='.exe'
          fi
          go mod download
          go build -o ${OUTPUT_NAME} .
          tar -cvzf ${OUTPUT_NAME}.tgz ${OUTPUT_NAME}
        env:
          GOARCH: ${{ matrix.goarch }}
          GOOS:   ${{ matrix.goos }}
          EXTRA_FILES: "LICENSE"

      - name: Create Release
        id: create_release
        uses: go-semantic-release/action@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          force-bump-patch-version: "true"
          changelog-generator-opt: "emojis=true"

      - name: zip artifact
        run: sleep 10

      - name: Gets latest created release info
        id: latest_release_info
        uses: jossef/action-latest-release-info@v1.1.0
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.latest_release_info.outputs.upload_url }}
          # This pulls from the CREATE RELEASE step above,
          # referencing it's ID to get its outputs object,
          # which include a `upload_url`.
          # See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./*.tgz
          asset_content_type: application/zip